#–Ω—É–∂–µ–Ω –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º
#1. –æ—Ç–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –º–µ–π–ª—É –≤ —Å–ª–µ–∫ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥
#2. –ó–∞–ø–∏—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ –∏ –≤—ã–¥–∞—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω

class Subject:
    def __init__(self):
        self._observers = []

    def attach(self, observer):
        self._observers.append(observer)

    def notify(self, msg):
        for o in self._observers:
            o.update(msg)

class Observer:
    def update(self, msg):
        print(f"Received: {msg}")

subject = Subject()
observer1 = Observer()
observer2 = Observer()
subject.attach(observer1)
subject.attach(observer2)

subject.notify("Hello Observers!")


############################## Make Observer for Notifications ##########################
# NotificationChannel	–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
# EmailNotifier, SlackNotifier, SMSNotifier	–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
# NotificationManager	–•—Ä–∞–Ω–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Ö

from abc import ABC, abstractmethod

# ---------- Observer (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å) ----------
class NotificationChannel(ABC):
    @abstractmethod
    def notify(self, message: str):
        pass


# ---------- Concrete Observers ----------
class EmailNotifier(NotificationChannel):
    def notify(self, message: str):
        print(f"üìß Email: {message}")


class SlackNotifier(NotificationChannel):
    def notify(self, message: str):
        print(f"üí¨ Slack: {message}")


class SMSNotifier(NotificationChannel):
    def notify(self, message: str):
        print(f"üì± SMS: {message}")


# ---------- Subject (–∏–∑–¥–∞—Ç–µ–ª—å) ----------
class NotificationManager:
    def __init__(self):
        self._observers: list[NotificationChannel] = []

    def subscribe(self, observer: NotificationChannel):
        self._observers.append(observer)

    def unsubscribe(self, observer: NotificationChannel):
        self._observers.remove(observer)

    def notify_all(self, message: str):
        print("üîî Sending notification to all channels...")
        for observer in self._observers:
            observer.notify(message)


# ---------- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ----------
if __name__ == "__main__":
    manager = NotificationManager()

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã
    manager.subscribe(EmailNotifier())
    manager.subscribe(SlackNotifier())
    manager.subscribe(SMSNotifier())

    # –°–æ–±—ã—Ç–∏–µ, –≤—ã–∑—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    manager.notify_all("Build failed on Jenkins job #42 ‚ùå")
